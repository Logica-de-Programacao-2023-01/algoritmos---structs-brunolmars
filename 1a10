type Circulo struct {
    raio float64
}

func calcularAreaCirculo(c Circulo) float64 {
    area := math.Pi * c.raio * c.raio
    return area
}
2-type Endereco struct {
    rua     string
    numero  int
    cidade  string
    estado  string
}

type Pessoa struct {
    nome     string
    idade    int
    endereco Endereco
}

func imprimirEnderecoCompleto(p Pessoa) {
    fmt.Printf("Endereço completo de %s:\n", p.nome)
    fmt.Printf("Rua: %s, %d\n", p.endereco.rua, p.endereco.numero)
    fmt.Printf("Cidade: %s, %s\n", p.endereco.cidade, p.endereco.estado)
}
3-type Triangulo struct {
    base   float64
    altura float64
}

func calcularAreaTriangulo(t Triangulo) float64 {
    area := (t.base * t.altura) / 2
    return area
}
4-type Musica struct {
    titulo   string
    artista  string
    duracao  string
}

type Playlist struct {
    nome    string
    musicas []Musica
}

func imprimirInformacoesPlaylist(p Playlist) {
    fmt.Printf("Playlist: %s\n", p.nome)
    
    duracaoTotal := 0
    
    for _, musica := range p.musicas {
        fmt.Printf("Música: %s\n", musica.titulo)
        fmt.Printf("Artista: %s\n", musica.artista)
        fmt.Printf("Duração: %s\n", musica.duracao)
        
        duracaoTotal += converterDuracaoParaSegundos(musica.duracao)
        
        fmt.Println("------------------------------")
    }
    
    duracaoTotalFormatada := converterSegundosParaDuracao(duracaoTotal)
    
    fmt.Printf("Tempo total da playlist: %s\n", duracaoTotalFormatada)
}

func converterDuracaoParaSegundos(duracao string) int {
    partes := strings.Split(duracao, ":")
    minutos, _ := strconv.Atoi(partes[0])
    segundos, _ := strconv.Atoi(partes[1])
    
    duracaoSegundos := (minutos * 60) + segundos
    
    return duracaoSegundos
}

func converterSegundosParaDuracao(segundos int) string {
    minutos := segundos / 60
    segundosRestantes := segundos % 60
    
    duracaoFormatada := fmt.Sprintf("%02d:%02d", minutos, segundosRestantes)
    
    return duracaoFormatada
}
5-func buscarPlaylistsPorTitulo(titulo string, playlists []Playlist) []Playlist {
    playlistsEncontradas := []Playlist{}
    
    for _, p := range playlists {
        for _, musica := range p.musicas {
            if musica.titulo == titulo {
                playlistsEncontradas = append(playlistsEncontradas, p)
                break
            }
        }
    }
    
    return playlistsEncontradas
}
6-type Funcionario struct {
    nome    string
    salario float64
    idade   int
}

func aumentarSalario(f *Funcionario, percentual float64) {
    aumento := f.salario * (percentual / 100)
    f.salario += aumento
}

func diminuirSalario(f *Funcionario, percentual float64) {
    reducao := f.salario * (percentual / 100)
    f.salario -= reducao
}

func calcularTempoServico(f *Funcionario) int {
    tempoServico := f.idade - 18
    return tempoServico
}
7-type Animal struct {
    nome   string
    especie string
    idade  int
    som    string
}

func modificarSom(a *Animal, novoSom string) {
    a.som = novoSom
}

func imprimirInformacoesAnimal(a Animal) {
    fmt.Printf("Nome: %s\n", a.nome)
    fmt.Printf("Espécie: %s\n", a.especie)
    fmt.Printf("Idade: %d\n", a.idade)
    fmt.Printf("Som: %s\n", a.som)
}
8-type Viagem struct {
    origem string
    destino string
    data string
    preco float64
}

func encontrarViagemMaisCara(viagens []Viagem) Viagem {
    viagemMaisCara := viagens[0]
    
    for _, v := range viagens {
        if v.preco > viagemMaisCara.preco {
            viagemMaisCara = v
        }
    }
    
    return viagemMaisCara
}
9-type Aluno struct {
    nome  string
    idade int
    notas []float64
}

func adicionarNota(aluno *Aluno, nota float64) {
    aluno.notas = append(aluno.notas, nota)
}

func removerNota(aluno *Aluno, indice int) {
    if indice >= 0 && indice < len(aluno.notas) {
        aluno.notas = append(aluno.notas[:indice], aluno.notas[indice+1:]...)
    }
}

func calcularMedia(aluno Aluno) float64 {
    total := 0.0
    
    for _, nota := range aluno.notas {
        total += nota
    }
    
    media := total / float64(len(aluno.notas))
    
    return media
}

func imprimirInformacoesAluno(aluno Aluno) {
    fmt.Printf("Nome: %s\n", aluno.nome)
    fmt.Printf("Idade: %d\n", aluno.idade)
    fmt.Printf("Média das notas: %.2f\n", calcularMedia(aluno))
}
10-type Filme struct {
    titulo     string
    diretor    string
    ano        int
    avaliacoes []int
}

func adicionarAvaliacao(filme *Filme, avaliacao int) {
    filme.avaliacoes = append(filme.avaliacoes, avaliacao)
}

func removerAvaliacao(filme *Filme, indice int) {
